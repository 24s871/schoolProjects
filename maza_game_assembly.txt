.386
.model flat, stdcall
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;includem biblioteci, si declaram ce functii vrem sa importam
includelib msvcrt.lib
extern exit: proc
extern malloc: proc
extern memset: proc

includelib canvas.lib
extern BeginDrawing: proc
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;declaram simbolul start ca public - de acolo incepe executia
public start
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;sectiunile programului, date, respectiv cod
.data
;aici declaram date
window_title DB "Exemplu proiect desenare",0
area_width EQU 640
area_height EQU 480
area DD 0

player_width equ 10
player_height equ 10

counter DD 0 ; numara evenimentele de tip timer
counterb DD 0
counterx DD 0
counterz DD 0
counterw DD 0

arg1 EQU 8  
arg2 EQU 12
arg3 EQU 16 
arg4 EQU 20

symbol_width EQU 10
symbol_height EQU 20
include digits.inc
include letters.inc
include player.inc


button_x EQU 500
button_y EQU 150
button_size EQU 50

button_left_x EQU 380
button_left_y EQU 150

button_up_x EQU 440
button_up_y EQU 110

button_down_x EQU  440
button_down_y EQU 190

box_len EQU 30
box_x EQU 11
box_y EQU 33

ghost_x DD 20
ghost_y DD 275

board_len EQU 10
board DD 0

player_x_prev dd 41
player_y_prev dd 273

player_x_next dd 41
player_y_next dd 273



.code

make_player proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	lea esi, player 
	
draw_text:
	mov ebx, player_width
	mul ebx
	mov ebx, player_height
	mul ebx
	add esi, eax
	mov ecx, player_height
	
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, player_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 1
	je simbol_pixel_albastru
	mov dword ptr [edi], 0A9A9A9h
	jmp simbol_pixel_next
simbol_pixel_albastru:
	mov dword ptr [edi], 040E0D0h
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_player endp

; un macro ca sa apelam mai usor desenarea simbolului
make_player_macro macro symbol, drawArea, x, y
	push y
	push x
    push drawArea 
	push symbol
	call make_player
	add esp, 16
endm




; procedura make_text afiseaza o litera sau o cifra la coordonatele date
; arg1 - simbolul de afisat (litera sau cifra)
; arg2 - pointer la vectorul de pixeli
; arg3 - pos_x
; arg4 - pos_y
make_text proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1] ; citim simbolul de afisat
	cmp eax, 'A'
	jl make_digit
	cmp eax, 'Z'
	jg make_digit
	sub eax, 'A'
	lea esi, letters
	jmp draw_text
make_digit:
	cmp eax, '0'
	jl make_space
	cmp eax, '9'
	jg make_space
	sub eax, '0'
	lea esi, digits
	jmp draw_text
make_space:	
	mov eax, 26 ; de la 0 pana la 25 sunt litere, 26 e space
	lea esi, letters
	
draw_text:
	mov ebx, symbol_width
	mul ebx
	mov ebx, symbol_height
	mul ebx
	add esi, eax
	mov ecx, symbol_height
bucla_simbol_linii:
	mov edi, [ebp+arg2] ; pointer la matricea de pixeli
	mov eax, [ebp+arg4] ; pointer la coord y
	add eax, symbol_height
	sub eax, ecx
	mov ebx, area_width
	mul ebx
	add eax, [ebp+arg3] ; pointer la coord x
	shl eax, 2 ; inmultim cu 4, avem un DWORD per pixel
	add edi, eax
	push ecx
	mov ecx, symbol_width
bucla_simbol_coloane:
	cmp byte ptr [esi], 0
	je simbol_pixel_alb
	mov dword ptr [edi], 0
	jmp simbol_pixel_next
simbol_pixel_alb:
	mov dword ptr [edi], 0FFFFFFh
simbol_pixel_next:
	inc esi
	add edi, 4
	loop bucla_simbol_coloane
	pop ecx
	loop bucla_simbol_linii
	popa
	mov esp, ebp
	pop ebp
	ret
make_text endp

; un macro ca sa apelam mai usor desenarea simbolului
make_text_macro macro symbol, drawArea, x, y
	push y
	push x
    push drawArea 
	push symbol
	call make_text
	add esp, 16
endm


mov eax, board_len
mov ebx, board_len
mul ebx
shl eax, 2
push eax
call malloc
add esp, 4
mov board, eax

make_box macro x,y,len,color
mov eax,y
mov ebx,area_width
mul ebx
add eax,x
shl eax,2
add eax,area
line_horizontal x,y,len,color
line_horizontal x,y+1,len,color
line_horizontal x,y+2,len,color
line_horizontal x,y+3,len,color
line_horizontal x,y+4,len,color
line_horizontal x,y+5,len,color
line_horizontal x,y+6,len,color
line_horizontal x,y+7,len,color
line_horizontal x,y+8,len,color
line_horizontal x,y+9,len,color
line_horizontal x,y+10,len,color
line_horizontal x,y+11,len,color
line_horizontal x,y+12,len,color
line_horizontal x,y+13,len,color
line_horizontal x,y+14,len,color
line_horizontal x,y+15,len,color
line_horizontal x,y+16,len,color
line_horizontal x,y+17,len,color
line_horizontal x,y+18,len,color
line_horizontal x,y+19,len,color
line_horizontal x,y+20,len,color
line_horizontal x,y+21,len,color
line_horizontal x,y+22,len,color
line_horizontal x,y+23,len,color
line_horizontal x,y+24,len,color
line_horizontal x,y+25,len,color
line_horizontal x,y+26,len,color
line_horizontal x,y+27,len,color
line_horizontal x,y+28,len,color
line_horizontal x,y+29,len,color
 endm

 
 make_box2 macro x,y,len,color
 mov eax,y
mov ebx,area_width
mul ebx
add eax,x
shl eax,2
add eax,area
line_horizontal x,y,len,color
line_horizontal x,y+1,len,color
line_horizontal x,y+2,len,color
line_horizontal x,y+3,len,color
line_horizontal x,y+4,len,color
line_horizontal x,y+5,len,color
line_horizontal x,y+6,len,color
line_horizontal x,y+7,len,color
line_horizontal x,y+8,len,color
line_horizontal x,y+9,len,color
line_horizontal x,y+10,len,color
line_horizontal x,y+11,len,color
line_horizontal x,y+12,len,color
line_horizontal x,y+13,len,color
line_horizontal x,y+14,len,color
line_horizontal x,y+15,len,color
line_horizontal x,y+16,len,color
line_horizontal x,y+17,len,color
line_horizontal x,y+18,len,color
line_horizontal x,y+19,len,color
 endm
 
 
make_line macro x,y,board_len
 make_box x,y,box_len,03D3C3Ah
 make_box x+30,y,box_len,03D3C3Ah
 make_box x+60,y,box_len,03D3C3Ah
 make_box x+90,y,box_len,03D3C3Ah
 make_box x+120,y,box_len,03D3C3Ah
 make_box x+150,y,box_len,03D3C3Ah
 make_box x+180,y,box_len,03D3C3Ah
 make_box x+210,y,box_len,03D3C3Ah
 make_box x+240,y,box_len,03D3C3Ah
 make_box x+270,y,box_len,03D3C3Ah
 endm
 
make_base macro x,y
make_line x,y,board_len
make_line x,y+30,board_len
make_line x,y+60,board_len
make_line x,y+90,board_len
make_line x,y+120,board_len
make_line x,y+150,board_len
make_line x,y+180,board_len
make_line x,y+210,board_len
make_line x,y+240,board_len
make_line x,y+270,board_len
endm

make_board1 macro x,y 
make_base x,y
make_box x+30,y,box_len,0A9A9A9h
make_box x+30,y+30,box_len,0A9A9A9h
make_box x+30,y+60,box_len,0A9A9A9h
make_box x+180,y,box_len,0FF0000h
make_box x+180,y+30,box_len,0FF0000h
make_box x+180,y+60,box_len,0FF0000h
make_box x+90,y+60,box_len,0FF0000h
make_box x+120,y+60,box_len,0FF0000h
make_box x+150,y+60,box_len,0FF0000h
make_box x,y+90,box_len,0FF0000h
make_box x+30,y+90,box_len,0FF0000h
make_box x+60,y+90,box_len,0FF0000h
make_box x+90,y+90,box_len,0FF0000h
make_box x+30,y+120,box_len,0A9A9A9h
make_box x+240,y+60,box_len,0FF0000h
make_box x+270,y+60,box_len,0FF0000h
make_box x+240,y+90,box_len,0FF0000h
make_box x+240,y+120,box_len,0FF0000h
make_box x+210,y+90,box_len,0A9A9A9h
make_box x+270,y+90,box_len,0A9A9A9h
make_box x+90,y+120,box_len,0FF0000h
make_box x+120,y+120,box_len,0FF0000h
make_box x+150,y+120,box_len,0FF0000h
make_box x+180,y+120,box_len,0FF0000h
make_box x+210,y+120,box_len,0A9A9A9h
make_box x+30,y+150,box_len,0A9A9A9h
make_box x+60,y+150,box_len,0A9A9A9h
make_box x+90,y+150,box_len,0A9A9A9h
make_box x+120,y+150,box_len,0A9A9A9h
make_box x+150,y+150,box_len,0A9A9A9h
make_box x+180,y+150,box_len,0A9A9A9h
make_box x+210,y+150,box_len,0A9A9A9h
make_box x+240,y+150,box_len,0A9A9A9h
make_box x+270,y+150,box_len,0A9A9A9h
make_box x+60,y+180,box_len,0A9A9A9h
make_box x+60,y+210,box_len,0A9A9A9h
make_box x+60,y+240,box_len,0A9A9A9h
;make_box x,y+240,box_len,0A9A9A9h
make_box x+30,y+240,box_len,0A9A9A9h

endm



make_shape macro x,y
line_horizontal 19,280,8,040E0D0h
line_vertical  19,280,8,040E0D0h
line_horizontal 19,288,8,040E0D0h
line_vertical 27,280,8,040E0D0h
endm

line_horizontal macro x,y,len,color
local bucla_linie
    mov eax,y ;eax=y
	mov ebx,area_width 
	mul ebx  ;eax=y*area_width
	add eax,x ;eax=y*area_width+x
	shl eax,2  ;eax=(y*area_width+x)*4
	add eax,area
	mov ecx,len
	bucla_linie:
	mov dword ptr[eax],color
	add eax,4
	loop bucla_linie
	
endm

line_vertical macro x,y,len,color
local bucla_linie
    mov eax,y ;eax=y
	mov ebx,area_width 
	mul ebx  ;eax=y*area_width
	add eax,x ;eax=y*area_width+x
	shl eax,2  ;eax=(y*area_width+x)*4
	add eax,area
	mov ecx,len
	bucla_linie:
	mov dword ptr[eax],color
	add eax,4*area_width
	loop bucla_linie
	endm
	 

	 
	 
	 
; functia de desenare - se apeleaza la fiecare click
; sau la fiecare interval de 200ms in care nu s-a dat click
; arg1 - evt (0 - initializare, 1 - click, 2 - s-a scurs intervalul fara click)
; arg2 - x
; arg3 - y
draw proc
	push ebp
	mov ebp, esp
	pusha
	
	mov eax, [ebp+arg1]
	cmp eax, 1
	jz evt_click
	cmp eax, 2
	jz evt_timer ; nu s-a efectuat click pe nimic
	;mai jos e codul care intializeaza fereastra cu pixeli albi
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	push 255
	push area
	call memset
	add esp, 12
	
	line_horizontal button_x,button_y,button_size,0
	 line_horizontal button_x,button_y+button_size,button_size,0
	 line_vertical button_x,button_y,button_size,0
	 line_vertical button_x+button_size,button_y,button_size,0
	 
	  line_horizontal button_up_x,button_up_y,button_size,0
	 line_horizontal button_up_x,button_up_y+button_size,button_size,0
	 line_vertical button_up_x,button_up_y,button_size,0
	 line_vertical button_up_x+button_size,button_up_y,button_size,0
	 
	 line_horizontal button_down_x,button_down_y,button_size,0
	 line_horizontal button_down_x,button_down_y+button_size,button_size,0
	 line_vertical button_down_x,button_down_y,button_size,0
	 line_vertical button_down_x+button_size,button_down_y,button_size,0
	 
	 	 line_horizontal button_left_x,button_left_y,button_size,0
	 line_horizontal button_left_x,button_left_y+button_size,button_size,0
	 line_vertical button_left_x,button_left_y,button_size,0
	 line_vertical button_left_x+button_size,button_left_y,button_size,0
	 make_box2 400,165,20,0
	 line_vertical 399,162,26,0
	 line_vertical 398,163,24,0
	 line_vertical 397,164,22,0
	 line_vertical 396,165,18,0
	 line_vertical 395,166,16,0
	 line_vertical 394,167,14,0
	 line_vertical 393,168,12,0
	 line_vertical 392,169,10,0
	 line_vertical 391,170,8,0
	 line_vertical 390,171,6,0
	 line_vertical 389,172,4,0
	 line_vertical 388,173,2,0
	 line_vertical 387,174,1,0
	 make_box2 455,135,20,0
	 line_horizontal 452,134,26,0
	 line_horizontal 453,133,24,0
	 line_horizontal 454,132,22,0
	 line_horizontal 455,131,20,0
	 line_horizontal 456,130,18,0
	 line_horizontal 457,129,16,0
	 line_horizontal 458,128,14,0
	 line_horizontal 459,127,12,0
	 line_horizontal 460,126,10,0
	 line_horizontal 461,125,8,0
	 line_horizontal 462,124,6,0
	 line_horizontal 463,123,4,0
	 line_horizontal 464,122,2,0
	 line_horizontal 465,121,1,0
	make_box2 455,200,20,0
	line_horizontal 452,220,26,0
	line_horizontal 453,221,24,0
	line_horizontal 454,222,22,0
	line_horizontal 455,223,20,0
	line_horizontal 456,224,18,0
	line_horizontal 457,225,16,0
	line_horizontal 458,226,14,0
	line_horizontal 459,227,12,0
	line_horizontal 460,228,10,0
	line_horizontal 461,229,8,0
	line_horizontal 462,230,6,0
	line_horizontal 463,231,4,0
	line_horizontal 464,232,2,0
	line_horizontal 465,233,1,0
	make_box2 510,165,20,0
	line_vertical 530,162,26,0
	line_vertical 531,163,24,0
	line_vertical 532,164,22,0
	line_vertical 533,165,20,0
	line_vertical 534,166,18,0
	line_vertical 535,167,16,0
	line_vertical 536,168,14,0
	line_vertical 537,169,12,0
	line_vertical 538,170,10,0
	line_vertical 539,171,8,0
	line_vertical 540,172,6,0
	line_vertical 541,173,4,0
	line_vertical 542,174,2,0
	line_vertical 543,175,1,0
	 make_board1 11,33
	 make_player_macro 0, area, 41, 273

	
evt_click:
	
	mov ebx,[ebp+arg2]
	cmp ebx,button_x
	jl button_fail_4
	cmp ebx,button_x+button_size
	jg button_fail_4
	mov ebx,[ebp+arg3]
	cmp ebx,button_y
	jl button_fail_4
	cmp ebx,button_y+button_size
	jg button_fail_4
		
	mov edi, area
    mov eax, player_x_prev
    add eax, 4
	
	mov eax,player_y_prev
	mov ebx,area_width
	mul ebx
	add eax,player_x_prev
	add eax,10
	shl eax,2
	add eax,area
	cmp dword ptr[eax],03D3C3Ah
	je button_fail_4
	 cmp dword ptr[eax],0FF0000h
	 je lava
	 cmp dword ptr[eax],0FFFFFFh
	 je final
	 
	mov eax,player_x_next
	cmp eax,311
	je afisare_litere
    
	;muta in dreapta
	 mov eax, player_x_prev
	 add eax, 10
	 mov player_x_next, eax 
	 mov eax, player_y_prev
	 mov player_y_next, eax 
	 
	
	 
	 make_player_macro 0, area, player_x_next, player_y_next
	 make_player_macro 1, area, player_x_prev, player_y_prev
	 
	 mov eax, player_x_next
	 mov player_x_prev, eax 
	 mov eax, player_y_next 
	 mov player_y_prev, eax 

	 
	 button_fail_4:
	 
	 
    mov ebx,[ebp+arg2]
	cmp ebx,button_up_x
	jl button_fail_2
	cmp ebx,button_up_x+button_size
	jg button_fail_2
	mov ebx,[ebp+arg3]
	cmp ebx,button_up_y
	jl button_fail_2
	cmp ebx,button_up_y+button_size
	jg button_fail_2
	
	
	mov edi, area
    mov eax, player_y_prev
    add eax, 4
	
	mov eax,player_y_prev
	sub eax,10
	mov ebx,area_width
	mul ebx
	add eax,player_x_prev
	shl eax,2
	add eax,area
	cmp dword ptr[eax],03D3C3Ah
	je button_fail_2
	 cmp dword ptr[eax],0FF0000h
	 je lava
	 cmp dword ptr[eax],0FFFFFFh
	 je final

	;muta in sus
	mov eax, player_y_prev
	 sub eax, 10
	 mov player_y_next, eax 
	 mov eax, player_x_prev
	 mov player_x_next, eax 
	 
	 make_player_macro 0,area,player_x_next,player_y_next
	 make_player_macro 1,area,player_x_prev,player_y_prev
	 
	  mov eax,player_x_next
	 mov player_x_prev,eax
	 mov eax,player_y_next
	 mov player_y_prev,eax
	 
	
	 
	button_fail_2:
	mov ebx,[ebp+arg2]
	cmp ebx,button_left_x
	jl button_fail_3
	cmp ebx,button_left_x+button_size
	jg button_fail_3
	mov ebx,[ebp+arg3]
	cmp ebx,button_left_y
	jl button_fail_3
	cmp ebx,button_left_y+button_size
	jg button_fail_3
	
	mov edi,area
	 mov eax, player_x_prev
    sub eax, 4
	
	mov eax,player_y_prev
	mov ebx,area_width
	mul ebx
	add eax,player_x_prev
	sub eax,10
	shl eax,2
	add eax,area
	cmp dword ptr[eax],03D3C3Ah
	je button_fail_3
	cmp dword ptr[eax],0FF0000h
	je lava
    cmp dword ptr[eax],0FFFFFFh
	je final
	;muta stanga
	 mov eax, player_x_prev
	 sub eax, 10
	 mov player_x_next, eax 
	 mov eax, player_y_prev
	 mov player_y_next, eax 
	 
	
	 
	 make_player_macro 0, area, player_x_next, player_y_next
	 make_player_macro 1, area, player_x_prev, player_y_prev
	 
	 mov eax, player_x_next
	 mov player_x_prev, eax 
	 mov eax, player_y_next 
	 mov player_y_prev, eax 

	
	
	button_fail_3:
	mov ebx,[ebp+arg2]
	cmp ebx,button_down_x
	jl button_fail_6
	cmp ebx,button_down_x+button_size
	jg button_fail_6
	mov ebx,[ebp+arg3]
	cmp ebx,button_down_y
	jl button_fail_6
	cmp ebx,button_down_y+button_size
	jg button_fail_6
	
	mov edi,area
	mov eax, player_y_prev
    add eax, 4
	
	mov eax,player_y_prev
	add eax,10
	mov ebx,area_width
	mul ebx
	add eax,player_x_prev
	shl eax,2
	add eax,area
	cmp dword ptr[eax],03D3C3Ah
	je button_fail_6
	
	;muta in jos
	mov eax,player_y_prev
	add eax, 10
	 mov player_y_next, eax 
	 mov eax, player_x_prev
	 mov player_x_next, eax 
	 
	 make_player_macro 0,area,player_x_next,player_y_next
	 make_player_macro 1,area,player_x_prev,player_y_prev
	 
	 mov eax,player_x_next
	 mov player_x_prev,eax
	 mov eax,player_y_next
	 mov player_y_prev,eax
	 
	 
	button_fail_6:
   jmp afisare_litere
   
    lava:
	 make_player_macro 1,area,player_x_prev,player_y_prev
	 mov eax,41
	 mov player_x_next,eax
	 mov eax,273
	 mov player_y_next,eax
	 make_player_macro 0,area,player_x_next,player_y_next
	 
	  mov eax,player_x_next
	 mov player_x_prev,eax
	 mov eax,player_y_next
	 mov player_y_prev,eax
	 jmp afisare_litere
	 
	 	 final:
	 make_text_macro 'V', area, 110, 370
	make_text_macro 'I', area, 120, 370
	make_text_macro 'C', area, 130, 370
	make_text_macro 'T', area, 140, 370
	make_text_macro 'O', area, 150, 370
	make_text_macro 'R', area, 160, 370
	make_text_macro 'I', area, 170, 370
	make_text_macro 'E', area, 170, 370
	 jmp button_fail_4
   
evt_timer:
	inc counter

	
	
afisare_litere:
	;afisam valoarea counter-ului curent (sute, zeci si unitati)
	mov ebx, 10
	mov eax, counter
	;cifra unitatilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 30, 10
	;cifra zecilor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 20, 10
	;cifra sutelor
	mov edx, 0
	div ebx
	add edx, '0'
	make_text_macro edx, area, 10, 10    
	 

	 
	
final_draw:
	popa
	mov esp, ebp
	pop ebp
	ret
draw endp

start:
	;alocam memorie pentru zona de desenat
	mov eax, area_width
	mov ebx, area_height
	mul ebx
	shl eax, 2
	push eax
	call malloc
	add esp, 4
	mov area, eax
	;apelam functia de desenare a ferestrei
	; typedef void (*DrawFunc)(int evt, int x, int y);
	; void __cdecl BeginDrawing(const char *title, int width, int height, unsigned int *area, DrawFunc draw);
	push offset draw
	push area
	push area_height
	push area_width
	push offset window_title
	call BeginDrawing
	add esp, 20
	 
	;terminarea programului
	push 0
	call exit
end start
